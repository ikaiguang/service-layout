// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package serviceexporter

import (
	"github.com/go-kratos/kratos/v2/transport/grpc"
	"github.com/go-kratos/kratos/v2/transport/http"
	"github.com/ikaiguang/service-layout/api/testing-service/v1/services"
	"github.com/ikaiguang/service-layout/app/testing-service/internal/biz/biz"
	"github.com/ikaiguang/service-layout/app/testing-service/internal/biz/repo"
	"github.com/ikaiguang/service-layout/app/testing-service/internal/data/data"
	"github.com/ikaiguang/service-layout/app/testing-service/internal/data/repo"
	"github.com/ikaiguang/service-layout/app/testing-service/internal/service/service"
	"github.com/ikaiguang/go-srv-kit/service/cleanup"
	"github.com/ikaiguang/go-srv-kit/service/setup"
)

// Injectors from wire.go:

func exportTestingData(launcherManager setuputil.LauncherManager) (datarepos.TestingDataRepo, error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, err
	}
	testingDataRepo := data.NewTestingData(logger)
	return testingDataRepo, nil
}

func exportTestingBiz(launcherManager setuputil.LauncherManager) (bizrepos.TestingBizRepo, error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, err
	}
	testingDataRepo, err := exportTestingData(launcherManager)
	if err != nil {
		return nil, err
	}
	testingBizRepo := biz.NewTestingBiz(logger, testingDataRepo)
	return testingBizRepo, nil
}

func exportTestdataServer(launcherManager setuputil.LauncherManager) (servicev1.SrvTestdataServer, error) {
	logger, err := setuputil.GetLogger(launcherManager)
	if err != nil {
		return nil, err
	}
	testingBizRepo, err := exportTestingBiz(launcherManager)
	if err != nil {
		return nil, err
	}
	srvTestdataServer := service.NewTestingV1Service(logger, testingBizRepo)
	return srvTestdataServer, nil
}

func exportServices(launcherManager setuputil.LauncherManager, hs *http.Server, gs *grpc.Server) (cleanuputil.CleanupManager, error) {
	srvTestdataServer, err := exportTestdataServer(launcherManager)
	if err != nil {
		return nil, err
	}
	cleanupManager, err := service.RegisterServices(hs, gs, srvTestdataServer)
	if err != nil {
		return nil, err
	}
	return cleanupManager, nil
}
